
{
    
    
    
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
    "pages": [{"date":"2024-01-08","image":"","imageAlt":"","link":"https://shorterthandijkstra.github.io/posts/forth-reading/","summary":"长文慎读","tags":["Forth"],"text":"这两天读一篇介绍forth的文章，非常长，谨慎阅读。\n讲了一些forth的特性（stack-based, concatenative programming等），和创始人chuck moore发展forth的历程，以及forth的一些成功应用。\n文章还列出了很多有趣的链接。\n","title":"Forth: The programming language that writes itself"},{"date":"2024-01-01","image":"","imageAlt":"","link":"https://shorterthandijkstra.github.io/posts/end-of-2023/","summary":"我在2023年做了什么","tags":["年终总结"],"text":"如你所见，今天是2024年的第一天，我在夜晚写下这篇2023年的个人总结。\n学习 出于对pl的兴趣，看完了friedman的eopl，这书的内容大致是教人实现一个不标准的ocaml。我把习题做完了，写了非常多的解释器。这是我看的friedman的第一本书，有时间把其他的作品也读读。\n然后出于对编译器的兴趣，又读了一下jeremy的 essentials of compilation 。因为不熟悉汇编，中间抽时间读完了王爽的《汇编语言》，不过读完后感觉这书过时了。和eopl一样，eoc也是用scheme作为教学语言，动态类型的语言重构起来很难受。我花了很多时间写gc和寄存器分配，最后写出来的编译器很多bug。虽然scheme是我的编程语言初恋，但是我不会再用它写大型项目了。或许我应该直接读虎书。\n对自己诚实是一个宝贵的品质。我本科的c语言学得很糟糕，对此我感到很焦虑。中间抽空把k\u0026amp;r读完了，没做习题，刷了几道codewars 。我操作系统也没学好，所以我把ostep读了一遍。\n其它编程语言方面，我看了一点ocaml的内容，想实现一个编程语言，用来当作找一份相关工作的筹码，但是目前搁置了。等继续学数理逻辑和tapl的时候再说吧。同时也学了一下rust，看了一些材料，刷了一些codewars和codeforces。\n除此之外，我看了一些金融，区块链方面的材料，也在继续学英语。\n看似学了很多东西，但是我其实可以做得更好。因为自制力不够，我浪费了很多时间。比如玩手机玩得很晚，第二天脑袋昏沉，无法学习。希望自己能慢慢改变这些不好的习惯。\n我有一股深深的知识和技能焦虑，比起其他厉害的同龄人，我差太远了，起步晚，中间还走错了路。我不嫉妒他们，但是需要努力向他们学习，这样才不会落得太远。当然，求知的第一推动力应该是兴趣和好奇。\n自由 我将分两个维度讨论这个问题：精神自由和财富自由。\n首先讨论精神自由。庄子说：“岂唯形骸有聋盲哉？”我深感自己的心智受到了蒙蔽，被困在枷锁中。我浅浅分析了一下，导致我精神困境的因素主要有两个，第一个是错误的观念。\n笛卡尔在《第一哲学沉思集》里的第一个沉思里这样写道：\n由于很久以来我就感觉到我自从幼年时期起就把一大堆错误的见解当作真实的接受了过来，而从那时以后我根据一些非常靠不住的原则建立起来的东西都不能不是十分可以、十分不可靠的，因此我认为，如果我想要在科学上建立起某种坚定可靠、经久不变的东西的话，我就非在我有生之日认真地把我历来信以为真的一切见解统统清除出去，再从根本上重新开始不可。\n在我成长的过程中，我也把一大堆错误的见解刻在自己的脑中，这给我的心灵造成了很大的痛苦。\n第二个因素是我自制力很差，无法控制自己享乐的欲望：比如沉迷短视频这种垃圾快乐（我从来不刷抖音，但是我喜欢玩b站），比如想要在他人身上获得虚荣。哲学家警告我们，金钱和社会地位是不值得追求的，对精神自由有害，但是和大多数人一样，我发现对这些东西的追逐是个迷人的游戏。\n我昨天读完了一本介绍斯多葛主义的书，它上面给出的一些建议或者有助于获得精神上的安宁。\n想象自己可能会遭受悲惨境遇，这样当灾难来临时，痛苦会减轻一些，同时也会让我们更珍惜当下所拥有的。 将事情分为三个维度：我们不能控制的，比如天气；我们能够控制的，比如自己的价值观；我们能够在一定程度上控制的，比如赢得一场比赛。对于我们不能控制的事物，根本无需过多担心。对于我们能够控制的，我们应该细心把控。对于最后一种情况，我们要学会区分内在和外在的目标，将努力放在实现内在目标上。比如参加网球比赛，外在目标是赢得比赛，这是我们不能控制的。但是我们可以在平时努力训练，赛前好好休息，这是我们能够实现的内在目标。 为了获得未来的安宁，可以思考过去和现在，但是过去和现在是无法改变的，所以只能拥抱它们。 偶尔过一种清苦的生活，警惕享乐。这能锻炼我们的意志力和自控力，它们对践行一种人生哲学是至关重要的。 时常反省自己，审视自己的思想，审视自己的情感，审视自己的动因。 我还读了一点《庄子》，但是刚开始。\n接下来讨论财富自由。\n哲学家告诫我们，财富是不值得追求的。人生短暂，我也认为把生命的主要精力放在追求财富上是愚蠢的。但是我认为财富有其价值。首先一点，如果有钱了，我就可以不做厌恶的工作，我可以把精力放在学习，写代码，阅读，旅游上。中国是一个福利很差的国家，财富能让我的家人过上更好的生活。\n但是获得财富是很困难的，而且世界变得越来越不平等。认真打工的人很难买一栋房子，很多人投机取巧甚至贪赃枉法却能获取巨量的钱财。\n我也看了一下北大教授的《金融经济学二十五讲》，但是很困惑，精力又不够，后面就放弃了。\n工作 很多的工作是没有意义的，甚至是对社会有害的。我目前的工作只能用来糊口，既赚不到什么钱，也学不到什么。\n希望自己以后能够做一些酷的工作，认识酷的人，这样，即使赚不到钱也没关系。\n2024年要做什么 强健的体魄，健康的作息。 继续学习plt，学习数理逻辑和类型论。 刷project euler。 践行斯多葛主义。 希望能够找一份编程语言相关的工作。 有时间学习一下乐理。 ","title":"End of 2023"},{"date":"2023-12-25","image":"","imageAlt":"","link":"https://shorterthandijkstra.github.io/posts/memorized-fibonacci/","summary":"利用Haskell的laziness计算斐波那契数列","tags":["Haskell"],"text":"今天在codewars刷到一题，看到一个人的解答很巧妙。\n众所周知，下面这段求斐波那契数列的代码很慢：\nfibonacci :: int -\u0026gt; integer fibonacci 0 = 0 fibonacci 1 = 1 fibonacci n = fibonacci (n-1) + fibonacci (n-2) 我们可以转成迭代的方式或者使用记忆化搜索。\n这是我从sicp的3.5节学到的，利用惰性求值算自然数数列：\nnat :: [int] nat = 0:map (+1) nat ok，你已经学会了怎么求自然数数列，接下来算斐波那契数列吧：\nfib :: int -\u0026gt; [int] fib = 0:1:zipwith (+) fib (tail fib) 但是能不能在保留树形递归的同时进行记忆化搜索呢？\n下面这段代码我觉得非常巧妙：\nfibonacci :: int -\u0026gt; integer fibonacci = (map fib\u0026#39; [0..] !!) where fib\u0026#39; 0 = 0 fib\u0026#39; 1 = 1 fib\u0026#39; n = fibonacci (n - 1) + fibonacci (n - 2) 以我对haskell的浅薄理解，我证明不了上述代码有记忆化搜索的性质，希望有高手能教教我。\n但是速度肯定是快多了，毕竟haskell wiki上是这样说的。\n（ok，这个月的博客糊弄完了！）\n","title":"memorized Fibonacci sequence"},{"date":"2023-11-21","image":"","imageAlt":"","link":"https://shorterthandijkstra.github.io/posts/tlb-measurement/","summary":"测量TLB的容量和访问TLB的开销","tags":["操作系统"],"text":"tlb的全称是translation lookaside buffer，不懂这个概念的人就不要看下去了，本文只讲讲怎么测量tlb的容量和访问tlb的开销。\n先来讲基本思路。假设我们有一个横跨多页的大数组arr，页面大小是4096个字节，int大小为4个字节，那么每页就有1024个数组元素。第1次访问arr[0]，第1次访问arr[1024]，第1次访问arr[2048] \u0026hellip;\u0026hellip; 于是我们就依次访问了第1页，第2页，第3页\u0026hellip;\u0026hellip;\n开一个横跨多页的数组，依次修改各个页里面的数组元素，访问的页面数量逐渐变多，直到超过了tlb的容量，访问数组元素就会变慢，这就是基本思路。\n几个问题：\n如何知道操作系统的页面大小？ 对于有多个cpu的计算机，为了得到更准确的数据，如何做到程序只在一个cpu上运行？ talk is cheap, show you my code：\n#define _gnu_source #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;stdint.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;sys/time.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sched.h\u0026gt; #define max_num_pages 256 #define trials 10000000 void trials(int jump, int num_pages, int arr[]) { struct timeval start, end; gettimeofday(\u0026amp;start, null); for (int i = 0; i \u0026lt; trials; i++) { for (int i = 0; i \u0026lt; num_pages * jump; i += jump) { arr[i] += 1; } } gettimeofday(\u0026amp;end, null); uint64_t trial_time = (end.tv_sec - start.tv_sec) * 1000000 + end.tv_usec - start.tv_usec; double one_trial_time = trial_time / (double)(num_pages * trials); printf(\u0026#34;pages:%d, average time:%f\\n\u0026#34;, num_pages, one_trial_time); } int main(int argc, char *argv[]) { cpu_set_t cpuset; cpu_zero(\u0026amp;cpuset); cpu_set(0, \u0026amp;cpuset); if (sched_setaffinity(0, sizeof(cpu_set_t), \u0026amp;cpuset)) { fprintf(stderr, \u0026#34;error setting cpu affinity\\n\u0026#34;); exit(exit_failure); } int page_size = getpagesize(); int jump = page_size / sizeof(int); int *arr = (int *)calloc(max_num_pages * jump, sizeof(int)); for (int pages = 1; pages \u0026lt; max_num_pages; pages++) { trials(jump, pages, arr); } } 不开任何优化，使用gcc编译运行，然后查看结果。在我的计算机上，访问页面数量在[1,10]这个区间时，访问一页所需的时间大约为3ns左右；当页面数量落在[11, 26]时，所需时间为6ns左右；继续增加页面数量，所需时间涨到10ns上下了。这说明系统存在二级tlb。我很懒，就不画折线图了。\n如果你有什么想法，或者发现了本文的问题，欢迎给我发邮件。\n","title":"测量TLB的容量和访问TLB的开销"},{"date":"0001-01-01","image":"","imageAlt":"","link":"https://shorterthandijkstra.github.io/reading/","summary":" https://ratfactor.com/ https://xfy.vercel.app/ https://sonnet.io/ https://colorforth.github.io/ https://ttalk.im/ https://ice1000.org/ https://hbfs.wordpress.com/ https://hutusi.com/ ","tags":[],"text":" https://ratfactor.com/ https://xfy.vercel.app/ https://sonnet.io/ https://colorforth.github.io/ https://ttalk.im/ https://ice1000.org/ https://hbfs.wordpress.com/ https://hutusi.com/ ","title":"Reading links"}]
}

